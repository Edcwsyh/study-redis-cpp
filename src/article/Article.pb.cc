// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Article.proto

#include "Article.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Article_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Article_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ArticleData;
}  // namespace protobuf_Article_2eproto
namespace Edc {
class ArticleDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ArticleData>
      _instance;
} _ArticleData_default_instance_;
class ArticleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Article>
      _instance;
} _Article_default_instance_;
}  // namespace Edc
namespace protobuf_Article_2eproto {
static void InitDefaultsArticleData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Edc::_ArticleData_default_instance_;
    new (ptr) ::Edc::ArticleData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Edc::ArticleData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ArticleData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsArticleData}, {}};

static void InitDefaultsArticle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Edc::_Article_default_instance_;
    new (ptr) ::Edc::Article();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Edc::Article::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Article =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsArticle}, {
      &protobuf_Article_2eproto::scc_info_ArticleData.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ArticleData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Article.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Edc::ArticleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Edc::ArticleData, createtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Edc::ArticleData, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Edc::ArticleData, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Edc::ArticleData, autor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Edc::Article, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Edc::Article, articleid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Edc::Article, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Edc::Article, articledata_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Edc::ArticleData)},
  { 9, -1, sizeof(::Edc::Article)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Edc::_ArticleData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Edc::_Article_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Article.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rArticle.proto\022\003Edc\"P\n\013ArticleData\022\022\n\nc"
      "reateTime\030\001 \001(\004\022\r\n\005title\030\002 \001(\t\022\017\n\007conten"
      "t\030\003 \001(\t\022\r\n\005autor\030\004 \001(\t\"R\n\007Article\022\021\n\tart"
      "icleID\030\001 \001(\004\022\r\n\005score\030\002 \001(\004\022%\n\013articleDa"
      "ta\030\003 \001(\0132\020.Edc.ArticleDatab\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 194);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Article.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Article_2eproto
namespace Edc {

// ===================================================================

void ArticleData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ArticleData::kCreateTimeFieldNumber;
const int ArticleData::kTitleFieldNumber;
const int ArticleData::kContentFieldNumber;
const int ArticleData::kAutorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ArticleData::ArticleData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Article_2eproto::scc_info_ArticleData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Edc.ArticleData)
}
ArticleData::ArticleData(const ArticleData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  autor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.autor().size() > 0) {
    autor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.autor_);
  }
  createtime_ = from.createtime_;
  // @@protoc_insertion_point(copy_constructor:Edc.ArticleData)
}

void ArticleData::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createtime_ = GOOGLE_ULONGLONG(0);
}

ArticleData::~ArticleData() {
  // @@protoc_insertion_point(destructor:Edc.ArticleData)
  SharedDtor();
}

void ArticleData::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ArticleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ArticleData::descriptor() {
  ::protobuf_Article_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Article_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ArticleData& ArticleData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Article_2eproto::scc_info_ArticleData.base);
  return *internal_default_instance();
}


void ArticleData::Clear() {
// @@protoc_insertion_point(message_clear_start:Edc.ArticleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  autor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createtime_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool ArticleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Edc.ArticleData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 createTime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Edc.ArticleData.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Edc.ArticleData.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string autor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_autor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->autor().data(), static_cast<int>(this->autor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Edc.ArticleData.autor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Edc.ArticleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Edc.ArticleData)
  return false;
#undef DO_
}

void ArticleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Edc.ArticleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 createTime = 1;
  if (this->createtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->createtime(), output);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Edc.ArticleData.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // string content = 3;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Edc.ArticleData.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  // string autor = 4;
  if (this->autor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->autor().data(), static_cast<int>(this->autor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Edc.ArticleData.autor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->autor(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Edc.ArticleData)
}

::google::protobuf::uint8* ArticleData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Edc.ArticleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 createTime = 1;
  if (this->createtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->createtime(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Edc.ArticleData.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // string content = 3;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Edc.ArticleData.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // string autor = 4;
  if (this->autor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->autor().data(), static_cast<int>(this->autor().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Edc.ArticleData.autor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->autor(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Edc.ArticleData)
  return target;
}

size_t ArticleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Edc.ArticleData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // string content = 3;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  // string autor = 4;
  if (this->autor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->autor());
  }

  // uint64 createTime = 1;
  if (this->createtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->createtime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArticleData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Edc.ArticleData)
  GOOGLE_DCHECK_NE(&from, this);
  const ArticleData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ArticleData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Edc.ArticleData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Edc.ArticleData)
    MergeFrom(*source);
  }
}

void ArticleData::MergeFrom(const ArticleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Edc.ArticleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.autor().size() > 0) {

    autor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.autor_);
  }
  if (from.createtime() != 0) {
    set_createtime(from.createtime());
  }
}

void ArticleData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Edc.ArticleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArticleData::CopyFrom(const ArticleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Edc.ArticleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArticleData::IsInitialized() const {
  return true;
}

void ArticleData::Swap(ArticleData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ArticleData::InternalSwap(ArticleData* other) {
  using std::swap;
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  autor_.Swap(&other->autor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(createtime_, other->createtime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ArticleData::GetMetadata() const {
  protobuf_Article_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Article_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Article::InitAsDefaultInstance() {
  ::Edc::_Article_default_instance_._instance.get_mutable()->articledata_ = const_cast< ::Edc::ArticleData*>(
      ::Edc::ArticleData::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Article::kArticleIDFieldNumber;
const int Article::kScoreFieldNumber;
const int Article::kArticleDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Article::Article()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Article_2eproto::scc_info_Article.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Edc.Article)
}
Article::Article(const Article& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_articledata()) {
    articledata_ = new ::Edc::ArticleData(*from.articledata_);
  } else {
    articledata_ = NULL;
  }
  ::memcpy(&articleid_, &from.articleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&articleid_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:Edc.Article)
}

void Article::SharedCtor() {
  ::memset(&articledata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&articledata_)) + sizeof(score_));
}

Article::~Article() {
  // @@protoc_insertion_point(destructor:Edc.Article)
  SharedDtor();
}

void Article::SharedDtor() {
  if (this != internal_default_instance()) delete articledata_;
}

void Article::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Article::descriptor() {
  ::protobuf_Article_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Article_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Article& Article::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Article_2eproto::scc_info_Article.base);
  return *internal_default_instance();
}


void Article::Clear() {
// @@protoc_insertion_point(message_clear_start:Edc.Article)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && articledata_ != NULL) {
    delete articledata_;
  }
  articledata_ = NULL;
  ::memset(&articleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&articleid_)) + sizeof(score_));
  _internal_metadata_.Clear();
}

bool Article::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Edc.Article)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 articleID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &articleid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Edc.ArticleData articleData = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_articledata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Edc.Article)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Edc.Article)
  return false;
#undef DO_
}

void Article::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Edc.Article)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 articleID = 1;
  if (this->articleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->articleid(), output);
  }

  // uint64 score = 2;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->score(), output);
  }

  // .Edc.ArticleData articleData = 3;
  if (this->has_articledata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_articledata(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Edc.Article)
}

::google::protobuf::uint8* Article::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Edc.Article)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 articleID = 1;
  if (this->articleid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->articleid(), target);
  }

  // uint64 score = 2;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->score(), target);
  }

  // .Edc.ArticleData articleData = 3;
  if (this->has_articledata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_articledata(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Edc.Article)
  return target;
}

size_t Article::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Edc.Article)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Edc.ArticleData articleData = 3;
  if (this->has_articledata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *articledata_);
  }

  // uint64 articleID = 1;
  if (this->articleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->articleid());
  }

  // uint64 score = 2;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Article::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Edc.Article)
  GOOGLE_DCHECK_NE(&from, this);
  const Article* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Article>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Edc.Article)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Edc.Article)
    MergeFrom(*source);
  }
}

void Article::MergeFrom(const Article& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Edc.Article)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_articledata()) {
    mutable_articledata()->::Edc::ArticleData::MergeFrom(from.articledata());
  }
  if (from.articleid() != 0) {
    set_articleid(from.articleid());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void Article::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Edc.Article)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Article::CopyFrom(const Article& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Edc.Article)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Article::IsInitialized() const {
  return true;
}

void Article::Swap(Article* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Article::InternalSwap(Article* other) {
  using std::swap;
  swap(articledata_, other->articledata_);
  swap(articleid_, other->articleid_);
  swap(score_, other->score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Article::GetMetadata() const {
  protobuf_Article_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Article_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Edc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Edc::ArticleData* Arena::CreateMaybeMessage< ::Edc::ArticleData >(Arena* arena) {
  return Arena::CreateInternal< ::Edc::ArticleData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Edc::Article* Arena::CreateMaybeMessage< ::Edc::Article >(Arena* arena) {
  return Arena::CreateInternal< ::Edc::Article >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
